#!/bin/bash

# This script performs a system update at a specified time and interval

# Function to check for root privileges
check_root() {
  if [ "$EUID" -ne 0 ]; then
    echo "Please run as root"
    exit 1
  fi
}

# Function to perform the system update
perform_update() {
  echo "Performing system update..."
  apt-get update && apt-get upgrade -y
  echo "System update completed."
}

# Function to schedule the system update
schedule_update() {
  local hour="$1"
  local minute="$2"
  local interval="$3"

  # Create a cron job
  (crontab -l 2>/dev/null; echo "$minute $hour */$interval * * /path/to/system_update_script.sh perform_update") | crontab -
  echo "System update scheduled at $hour:$minute every $interval days."
}

# Function to get user input
get_user_input() {
  read -p "Enter the hour (0-23) for the system update: " hour
  read -p "Enter the minute (0-59) for the system update: " minute
  read -p "Enter the interval in days for the system update: " interval

  if [[ ! "$hour" =~ ^[0-9]+$ ]] || [ "$hour" -lt 0 ] || [ "$hour" -gt 23 ]; then
    echo "Invalid hour. Please enter a value between 0 and 23."
    exit 1
  fi

  if [[ ! "$minute" =~ ^[0-9]+$ ]] || [ "$minute" -lt 0 ] || [ "$minute" -gt 59 ]; then
    echo "Invalid minute. Please enter a value between 0 and 59."
    exit 1
  fi

  if [[ ! "$interval" =~ ^[0-9]+$ ]] || [ "$interval" -lt 1 ]; then
    echo "Invalid interval. Please enter a positive integer."
    exit 1
  fi

  schedule_update "$hour" "$minute" "$interval"
}

# Function to display usage
usage() {
  echo "Usage: $0 [perform_update]"
  echo "If no arguments are specified, it will prompt to schedule a system update."
  echo "If 'perform_update' is specified, it will perform a system update immediately."
}

# Main function
main() {
  check_root

  if [ "$1" == "perform_update" ]; then
    perform_update
  else
    get_user_input
  fi
}

# Run the main function
main "$@"
